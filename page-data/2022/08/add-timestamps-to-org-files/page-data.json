{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2022/08/add-timestamps-to-org-files/","result":{"data":{"site":{"siteMetadata":{"repsitory":"https://github.com/tmr08c/tmr08c.github.io"}},"markdownRemark":{"id":"a87ff61d-5dee-5d77-b271-6de9f1499d45","excerpt":"In this post, I cover adding timestamps to track creation and modification times in org-roam files and how to update existing nodes to include these timestampsâ€¦","html":"<p>In this post, I cover adding timestamps to track creation and modification times in <a href=\"https://github.com/org-roam/org-roam\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>org-roam</code></a> files and how to update existing nodes to include these timestamps.</p>\n<h2 id=\"adding-the-timestamps\" style=\"position:relative;\"><a href=\"#adding-the-timestamps\" aria-label=\"adding the timestamps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding the timestamps</h2>\n<p>We will track our creation and modification timestamps with <a href=\"https://orgmode.org/worg/dev/org-syntax.html#Keywords\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">keywords</a>. This post uses <code>created_at</code> and <code>last_modified</code>, but you can choose alternatives as you see fit.</p>\n<p>We will begin by ensuring newly created nodes include our timestamp fields. We do this by updating our capture templates.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"emacs-lisp\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(setq org-roam-capture-templates</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &#39;((&quot;d&quot; &quot;default&quot; plain &quot;%?&quot; :target</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (file+head &quot;%&lt;%Y%m%d%H%M%S&gt;-${slug}.org&quot; &quot;#+title: ${title}\\n#+created_at: %U\\n#+last_modified: %U\\n\\n\\n&quot;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  :unnarrowed t)))</span></span></code></pre>\n<p>This template is based on the <a href=\"https://github.com/org-roam/org-roam/blob/c3867619147175faf89ed8f3e90a1e67a4fd9655/org-roam-capture.el#L41-L45\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">default in org-roam</a>, and simply adds our two new keywords.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"diff\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">&#39;((&quot;d&quot; &quot;default&quot; plain &quot;%?&quot; :target</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  -(file+head &quot;%&lt;%Y%m%d%H%M%S&gt;-${slug}.org&quot; &quot;#+title: ${title}\\n&quot;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  +(file+head &quot;%&lt;%Y%m%d%H%M%S&gt;-${slug}.org&quot; &quot;#+title: ${title}\\n#+created_at: %U\\n#+last_modified: %U\\n\\n\\n&quot;)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">    :unnarrowed t))</span></span></span></code></pre>\n<p>If you have multiple capture templates, you will need to update them all.</p>\n<h3 id=\"backfilling-data\" style=\"position:relative;\"><a href=\"#backfilling-data\" aria-label=\"backfilling data permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Backfilling Data</h3>\n<p>At this point, <strong>new</strong> <code>org-roam</code> files will include the <code>created_at</code> and <code>last_modified</code> keywords . This section covers updating all of our existing files to include these keywords as well.</p>\n<p><em>Please note that I used this as a chance to learn some <code>emacs-lisp</code>, so it may not be following best practices. Only after the fact did I realize I should have referenced something like <a href=\"https://github.com/org-roam/org-roam/blob/main/org-roam-migrate.el\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">org-roam-migrate.el</a> for a more robust solution. That said, it does work which isn't bad for one-time-use code.</em></p>\n<h3 id=\"getting-dates\" style=\"position:relative;\"><a href=\"#getting-dates\" aria-label=\"getting dates permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Getting Dates</h3>\n<p>Since I am leveraging <code>org-roam</code>'s <a href=\"https://github.com/org-roam/org-roam/blob/7f453f3fffb924ca4ae3f8d34cabc03fbcae0127/org-roam-capture.el#L43\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">default filename capture template</a>, I have access to the canonical node creation time right in the file name.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"emacs-lisp\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(defcustom org-roam-capture-templates</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &#39;((&quot;d&quot; &quot;default&quot; plain &quot;%?&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      :target (file+head &quot;%&lt;%Y%m%d%H%M%S&gt;-${slug}.org&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                        &quot;#+title: ${title}\\n&quot;)</span></span></code></pre>\n<p>With this format in mind, I use a regular expression to match the datetime format of the file name.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"emacs-lisp\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(defun tr/file-creation-time-from-name (fpath)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &quot;Extract a timestamp from the file name. Relies on files having the format</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      &#39;YYYYMMDDHHMMSS-*&#39; (the default org-roam node filename).&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (let ((filename (file-name-base fpath)))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (tr/format-org-date</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     (tr/time-stamp-to-org-timestamp</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      (replace-regexp-in-string</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       &quot;\\\\([[:digit:]]\\\\{4\\\\}\\\\)\\\\([[:digit:]]\\\\{2\\\\}\\\\)\\\\([[:digit:]]\\\\{2\\\\}\\\\)\\\\([[:digit:]]\\\\{2\\\\}\\\\)\\\\([[:digit:]]\\\\{2\\\\}\\\\)\\\\([[:digit:]]\\\\{2\\\\}\\\\)-.*&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       &quot;\\\\1-\\\\2-\\\\3 \\\\4:\\\\5:\\\\6&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">       filename)))))</span></span></code></pre>\n<p>Once I have the datetime extracted into a string, I use two helper functions to convert it into an org-friendly date.</p>\n<p>First, I used a modified version of <code>org-timestamp-from-time</code> that can parse the datetime string we created and convert it into an <code>org-timestamp</code>.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"emacs-lisp\" data-index=\"4\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(defun tr/time-stamp-to-org-timestamp (ts)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &quot;Taken from `org-timestamp-from-time` - the original function used</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     `decode-time`, which doesn&#39;t work with our timestamp, so we use</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">     `parse-time-string` instead&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (pcase-let ((`(,_ ,minute ,hour ,day ,month ,year . ,_) (parse-time-string ts)))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (org-element-create &#39;timestamp</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                        (list :type &#39;active</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                              :year-start year</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                              :month-start month</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                              :day-start day</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                              :hour-start hour</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">                              :minute-start minute))))</span></span></code></pre>\n<p>I then format the <code>org-timestamp</code> <em>back</em> into a string but formatted the same as the timestamp used when we create a new file.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"emacs-lisp\" data-index=\"5\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(defun tr/format-org-date (date)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (org-timestamp-format date &quot;\\[%Y-%02m-%02d %3a %02H:%02M\\]&quot;))</span></span></code></pre>\n<p>To fetch the <code>last_modified</code> value, we can use the <code>file-attributes</code> function from <code>Emacs</code> itself. After we grab the modification time from our file attributes, we can pass it into the function we cribbed from above (<code>org-timestamp-from-time</code>) and reuse our formatting function.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"emacs-lisp\" data-index=\"6\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(defun tr/modification-timestamp (fpath)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &quot;Use file-attributes to get the modification time of a file and convert it to an</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  org-timestamp&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (tr/format-org-date</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   (org-timestamp-from-time</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (file-attribute-modification-time (file-attributes fpath)))))</span></span></code></pre>\n<p>Knowing I want to use both values together, I wrote a function that calls both helpers and wraps them in a list.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"emacs-lisp\" data-index=\"7\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(defun tr/file-datetime-info (fpath)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &quot;Get a list containing a file&#39;s creation and change datetime&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (list (tr/file-creation-time-from-name fpath)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (tr/modification-timestamp fpath)))</span></span></code></pre>\n<h3 id=\"adding-timestamps-to-a-file\" style=\"position:relative;\"><a href=\"#adding-timestamps-to-a-file\" aria-label=\"adding timestamps to a file permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Adding timestamps to a file</h3>\n<p>Now that, for a given file, we can get our two timestamps, we can use our <code>tr/file-datetime-info</code> function to insert these values into our files. using the following function.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"emacs-lisp\" data-index=\"8\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(defun tr/add-time-stamp (fpath)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  &quot;Add `created_at` and `last_modified` timemstamps keywords to file&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (message (format &quot;Checking file %s&quot; fpath))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (setq case-fold-search t)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (find-file-other-window fpath)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (goto-char (point-min))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  ;; don&#39;t add if we already have `created_at&#39;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (unless (search-forward &quot;#+created_at&quot; &#39;nil t)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">    (progn</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">      (pcase-let ((`(,created-time ,modified-time) (tr/file-datetime-info fpath)))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (goto-char (point-min))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (search-forward &quot;#+title&quot;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (end-of-line)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (newline)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (insert (format &quot;#+created_at: %s\\n#+last_modified: %s&quot; created-time modified-time))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        (write-file fpath))))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (other-window 1))</span></span></code></pre>\n<p>This function will:</p>\n<ol>\n<li>Open the given file in another window</li>\n<li>Go to the top of the file</li>\n<li>Check if the <code>create_at</code> field exists before moving on. Since I had created some new files using my new template and was debugging my code as I went, this allowed me to skip files I may have already updated.</li>\n<li>Insert the two datetimes after the <code>title</code> keyword, matching our new file template above</li>\n</ol>\n<p>I don't know if it was necessary to open the file in another window, but, during development, it was helpful to have the file I was manipulating already open. Also, when running this in bulk, neither the <code>message</code> nor the other window provided much feedback because files were processed so quickly.</p>\n<h3 id=\"updating-all-the-files\" style=\"position:relative;\"><a href=\"#updating-all-the-files\" aria-label=\"updating all the files permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating all the files</h3>\n<p>Now that we have all of the pieces in place to update a single file, updating all nodes is simple. We can leverage <a href=\"https://github.com/org-roam/org-roam/blob/7f453f3fffb924ca4ae3f8d34cabc03fbcae0127/org-roam.el#L115-L119\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>org-roam-directory</code></a> to find all of our <code>org-roam-files</code> and call <code>tr/add-time-stamp</code> for each.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"emacs-lisp\" data-index=\"9\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"> (let ((files (directory-files org-roam-directory &#39;full &quot;.org&quot;)))</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">   (dolist (file files) (tr/add-time-stamp file)))</span></span></code></pre>\n<h2 id=\"updating-the-timestamps\" style=\"position:relative;\"><a href=\"#updating-the-timestamps\" aria-label=\"updating the timestamps permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating the timestamps</h2>\n<p>Our final step is keeping our <code>last_modified</code> value up-to-date. To do this, we can leverage a <code>before-save-hook</code>.</p>\n<p>Based on <a href=\"https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321/18\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this post</a>, the hook leverages the built-in <a href=\"https://www.emacswiki.org/emacs/TimeStamp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>time-stamp</code> module</a> to find and update the timestamp after our <code>last_modified</code> keyword.</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"emacs-lisp\" data-index=\"10\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\">(after! org</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (setq time-stamp-active t</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        time-stamp-start &quot;#\\\\+last_modified: [\\t]*&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        time-stamp-end &quot;$&quot;</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">        time-stamp-format &quot;\\[%Y-%02m-%02d %3a %02H:%02M\\]&quot;)</span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\">  (add-hook &#39;before-save-hook &#39;time-stamp))</span></span></code></pre>\n<p>Two things to note:</p>\n<ol>\n<li>The <code>after!</code> keyword is <a href=\"https://github.com/doomemacs/doomemacs/blob/c44bc81a05f3758ceaa28921dd9c830b9c571e61/lisp/doom-lib.el#L496\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">defined in Doom</a>. If you are not using Doom, you may need to adjust if you want this to only load for <code>org-mode</code> files.</li>\n<li>This hook will run in all of your org files. I have not noticed a performance concern when saving, but, if you do, you may want to investigate limiting the scope of the hook.</li>\n</ol>\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>While I don't yet know if the decision to add these timestamps will prove to provide value or simply satisfy a curiosity, this work may be an example of getting more from the journey than the destination. My journey has taken me a step deeper into the world of Emacs and the power it provides in enabling package configuration (updating my templates), editor behavior (adding save hooks), and bulk editing files.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .tomorrow {\n    background-color: #FFFFFF;\n    color: #4D4D4C;\n  }\n  .tomorrow .grvsc-t564vY-1 { color: #4D4D4C; }\n  .tomorrow .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body.dark .grvsc-ps-tJmpaV {\n    background-color: #1D1F21;\n    color: #C5C8C6;\n  }\n  body.dark .grvsc-ps-tJmpaV .grvsc-tJmpaV-1 { color: #C5C8C6; }\n  body.dark .grvsc-ps-tJmpaV .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"Add Timestamps to org-roam Files","date":"August 31, 2022"}}},"pageContext":{"slug":"/2022/08/add-timestamps-to-org-files/","previous":{"fields":{"slug":"/2022/07/just-in-time-feature-surfacing/"},"frontmatter":{"title":"Just-in-time Feature Surfacing"}},"next":{"fields":{"slug":"/2022/09/compiling-erlang-documentation/"},"frontmatter":{"title":"Compiling Erlang Documentation"}}}},"staticQueryHashes":["3128451518","3649515864"]}