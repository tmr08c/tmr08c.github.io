{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/2020/05/concurrent-ruby-hello-async/","result":{"data":{"site":{"siteMetadata":{"repsitory":"https://github.com/tmr08c/tmr08c.github.io"}},"markdownRemark":{"id":"4738454c-8dbc-598d-bcd9-8ace7bbe8d20","excerpt":"Over the last few years, I have been fiddling on-and-off with Elixir and have loved it. One of the reasons there is so much hype around Elixir is the out-of-theâ€¦","html":"<p>Over the last few years, I have been fiddling on-and-off with <a href=\"https://elixir-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Elixir</a> and have <strong>loved</strong> it. One of the reasons there is so much hype around Elixir is the out-of-the-box support for writing highly concurrent code. The concurrency model is a native part of the language and comes from the <a href=\"https://www.erlang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Erlang</a> VM which Elixir runs on. </p>\n<p>Even though I'm working primarily in Ruby, I don't want to give up on the benefits of concurrency I've seen in Elixir. While I don't expect to see an Elixir level of concurrency support, I believe Ruby has viable options.</p>\n<p>One option I found is the <a href=\"https:/github.com/ruby-concurrency/concurrent-ruby\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>concurrent-ruby</code> gem</a>. From the gem's description:</p>\n<blockquote>\n<p>Modern concurrency tools including agents, futures, promises, thread pools, supervisors, and more. Inspired by Erlang, Clojure, Scala, Go, Java, JavaScript, and classic concurrency patterns.</p>\n</blockquote>\n<p>Having multiple concurrency paradigms provides the opportunity to pick-and-choose based on needs. It also provides the opportunity to learn about the various methods of concurrency all in one place.</p>\n<h2 id=\"choosing-where-to-start\" style=\"position:relative;\"><a href=\"#choosing-where-to-start\" aria-label=\"choosing where to start permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Choosing where to start</h2>\n<p>I thought a good place to start would be to simply pick a concurrency model and write some code. The first option <a href=\"https://github.com/ruby-concurrency/concurrent-ruby#general-purpose-concurrency-abstractions\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">listed in the README</a> is their <a href=\"http://ruby-concurrency.github.io/concurrent-ruby/master/Concurrent/Async.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>Async</code></a>  module. This concurrency model also happens to be inspired by Erlang's (and therefore Elixir's) <a href=\"https://elixir-lang.org/getting-started/mix-otp/genserver.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>gen_server</code></a>, so it was the perfect place to start. </p>\n<p>In Elixir/Erlang, a <code>gen_server</code> would run in a new Erlang process (<em>insert disclaimer about Erlang's processes not being Operating System processes here</em>). This allows it to run independently of the caller's process. <code>concurrent-ruby</code> provides similar functionality with Ruby's <a href=\"https://ruby-doc.org/core-2.7.0/Thread.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>Thread</code></a>. </p>\n<p>When <code>include</code>d in a class, <code>Async</code> adds two new methods to the class that can be used as proxies. When used, these methods will \"wrap\" the method you are calling. By wrapping the method, the proxies will handle the setup for running in a separate thread. These new methods are (1) <a href=\"http://ruby-concurrency.github.io/concurrent-ruby/master/Concurrent/Async.html#async-instance_method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>async</code></a> which will immediately return to the caller while continuing the work in the new thread and (2) <a href=\"http://ruby-concurrency.github.io/concurrent-ruby/master/Concurrent/Async.html#await-instance_method\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>await</code></a> which will also do the work in the other thread, but, when called, will block (or (a)wait) the main thread until the method finishes and returns. </p>\n<p>If you are familiar with the Erlang terms, you can also use <code>cast</code> (<code>async</code>) and <code>call</code> (<code>await</code>) instead.</p>\n<h2 id=\"starting-with-an-example\" style=\"position:relative;\"><a href=\"#starting-with-an-example\" aria-label=\"starting with an example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Starting with an example</h2>\n<p>I decided to start with the example they have <a href=\"http://ruby-concurrency.github.io/concurrent-ruby/master/Concurrent/Async.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">in the docs</a>:</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"ruby\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-10 grvsc-tJmpaV-10\">require</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">&#39;concurrent-ruby&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-11 grvsc-tJmpaV-11\">class</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-9 grvsc-tJmpaV-9\">Hello</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-10 grvsc-tJmpaV-10\">include</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-9 grvsc-tJmpaV-9\">Concurrent</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">::</span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">Async</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-11 grvsc-tJmpaV-11\">def</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-10 grvsc-tJmpaV-10\">hello</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">(</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">name</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">    </span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">&quot;Hello, </span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">#{</span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">name</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">}</span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">!&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-11 grvsc-tJmpaV-11\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-11 grvsc-tJmpaV-11\">end</span></span></span></code></pre>\n<p>Starting out in <code>irb</code> I was able to make the following calls.</p>\n<h4 id=\"await-version\" style=\"position:relative;\"><a href=\"#await-version\" aria-label=\"await version permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Await Version</h4>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"ruby\" data-index=\"1\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">&gt;</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-9 grvsc-tJmpaV-9\">Hello</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">.</span><span class=\"grvsc-t564vY-10 grvsc-tJmpaV-10\">new</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">.await.hello(</span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">&quot;world&quot;</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">=&gt; </span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Concurrent::IVar:0x00007fb62e8d5ec8</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Condition__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::ConditionVariable:0x00007fb62e8d5e28&gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Lock__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::Mutex:0x00007fb62e8d5e50&gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@copy_on_deref</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">nil</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@do_nothing_on_deref</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">true</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@dup_on_deref</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">nil</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@event</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Concurrent::Event:0x00007fb62e8d5db0</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">   </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Condition__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::ConditionVariable:0x00007fb62e8d58d8&gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">   </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Lock__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::Mutex:0x00007fb62e8d5d38&gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">   </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@iteration</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">0</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">   </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@set</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">true</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">&gt;</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@freeze_on_deref</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">nil</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@observers</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Concurrent::Collection::CopyOnWriteObserverSet:0x00007fb62e8d5888</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">   </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Condition__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::ConditionVariable:0x00007fb62e8d57c0&gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">   </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Lock__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::Mutex:0x00007fb62e8d5838&gt;,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">   </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@observers</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">{}</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">&gt;</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@reason</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">nil</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@state</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">:fulfilled</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@value</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">&quot;Hello, world!&quot;</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">&gt;</span></span></span></code></pre>\n<h4 id=\"async-version\" style=\"position:relative;\"><a href=\"#async-version\" aria-label=\"async version permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async Version</h4>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"ruby\" data-index=\"2\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">&gt;</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-9 grvsc-tJmpaV-9\">Hello</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">.</span><span class=\"grvsc-t564vY-10 grvsc-tJmpaV-10\">new</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">.async.hello(</span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">&quot;world&quot;</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">=&gt; </span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Concurrent::IVar:0x00007fe09b08b230 </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Lock__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::Mutex:0x00007fe09b08b1b8&gt;, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Condition__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::ConditionVariable:0x00007fe09b08b190&gt;, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@event</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Concurrent::Event:0x00007fe09b08b118 </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Lock__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::Mutex:0x00007fe09b08b0a0&gt;, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Condition__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::ConditionVariable:0x00007fe09b08b078&gt;, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@set</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">false</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@iteration</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">0</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">&gt;</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@reason</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">nil</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@observers</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Concurrent::Collection::CopyOnWriteObserverSet:0x00007fe09b08b028 </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">   </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Lock__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::Mutex:0x00007fe09b08afd8&gt;, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">   </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@__Condition__</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-3 grvsc-tJmpaV-3\">#&lt;Thread::ConditionVariable:0x00007fe09b08afb0&gt;, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">   </span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@observers</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">{}</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">&gt;</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@dup_on_deref</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">nil</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@freeze_on_deref</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">nil</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@copy_on_deref</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">nil</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@do_nothing_on_deref</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">true</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">, </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@state</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">:pending</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">,</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">@value</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">=</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">nil</span><span class=\"grvsc-t564vY-6 grvsc-tJmpaV-6\">&gt;</span></span></span></code></pre>\n<h3 id=\"return-types\" style=\"position:relative;\"><a href=\"#return-types\" aria-label=\"return types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Return Types</h3>\n<p>The <code>hello</code> method simply returns a string.  This is fast enough that I didn't notice a speed difference between the two calls. I did, however, notice a difference in what is being returned. Proxying through <code>async</code> and <code>await</code> result in method calls returning a <a href=\"http://ruby-concurrency.github.io/concurrent-ruby/master/Concurrent/IVar.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>Concurrent::IVar</code></a> instead of the original method's \"raw\" response. </p>\n<p>From the docs:</p>\n<blockquote>\n<p>An <code>IVar</code> is like a future that you can assign. As a future is a value that is being computed that you can wait on, an <code>IVar</code> is a value that is waiting to be assigned, that you can wait on. <code>IVars</code> are single assignment and deterministic.</p>\n</blockquote>\n<p>Without digging too much into <code>IVar</code>s at this point, a few things stick out. </p>\n<p>In the <code>await</code> version, the <code>IVar</code> has a <code>@state</code> of <code>:fulfilled</code>.  We also have a <code>@value</code> of \"Hello, world!\" (the method's return value). Intuitively, this makes sense - with <code>await</code> we wait for the method to finish before continuing. By finishing the method call, the work has been \"fulfilled\" and we know what our return value is. </p>\n<p>Contrast this with the result of the <code>async</code> version. The <code>async</code> call returns an <code>IVar</code> with a <code>@state</code> of <code>:pending</code> and a <code>@value</code> of <code>nil</code>. The <code>async</code> version returns without waiting for the method to run. This means we are still waiting for our results. </p>\n<p>For now, I am going to assume this is similar enough to JavaScript's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>Promise</code></a> that I can continue to focus on the <code>Async</code> module and learn more about <code>IVar</code>s at a later time. </p>\n<h2 id=\"is-anything-happening\" style=\"position:relative;\"><a href=\"#is-anything-happening\" aria-label=\"is anything happening permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Is anything happening?</h2>\n<p>At this point, things seem to be working. I am getting back <code>IVar</code>s instead of the string the <code>hello</code> method returns, so the <code>Async</code> module is doing <em>something</em>. However, the <code>await</code> version runs so fast that it doesn't <em>seem</em> like the methods are performing any differently. </p>\n<p>Often times, you would move work into another thread if it's slow and gets in the way of your main thread. To replicate this in my testing, I decided to fake working hard by <a href=\"https://ruby-doc.org/core-2.7.0/Kernel.html#method-i-sleep\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>sleep</code></a>ing. I also decided to print the \"hello\" string instead of returning it. This allows me to avoid <del>dealing with</del> thinking about <code>IVars</code> during my initial exploration. Printing gives me a visual indication the methods are running without having to worry about what is being returned.</p>\n<p>Now, my test class looks something like:</p>\n<pre class=\"grvsc-container tomorrow grvsc-ps-tJmpaV\" data-language=\"ruby\" data-index=\"3\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-10 grvsc-tJmpaV-10\">require</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">&#39;concurrent-ruby&#39;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-11 grvsc-tJmpaV-11\">class</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-9 grvsc-tJmpaV-9\">Hello</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-10 grvsc-tJmpaV-10\">include</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-9 grvsc-tJmpaV-9\">Concurrent</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">::</span><span class=\"grvsc-t564vY-8 grvsc-tJmpaV-8\">Async</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-11 grvsc-tJmpaV-11\">def</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-10 grvsc-tJmpaV-10\">hello</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">(</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">name</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">    </span><span class=\"grvsc-t564vY-10 grvsc-tJmpaV-10\">sleep</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">(</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">3</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">) </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">    </span><span class=\"grvsc-t564vY-10 grvsc-tJmpaV-10\">puts</span><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\"> </span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">&quot;Hello, </span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">#{</span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">name</span><span class=\"grvsc-t564vY-4 grvsc-tJmpaV-4\">}</span><span class=\"grvsc-t564vY-7 grvsc-tJmpaV-7\">!&quot;</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-1 grvsc-tJmpaV-1\">  </span><span class=\"grvsc-t564vY-11 grvsc-tJmpaV-11\">end</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"grvsc-t564vY-11 grvsc-tJmpaV-11\">end</span></span></span></code></pre>\n<p>After reloading this class into <code>irb</code>, I now have:</p>\n<ul>\n<li>A visual indication of when the method has run from the <code>puts</code> statement.</li>\n<li>A method that takes longer to run as a result of the call to <code>sleep</code>. </li>\n</ul>\n<h4 id=\"await-version-1\" style=\"position:relative;\"><a href=\"#await-version-1\" aria-label=\"await version 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Await Version</h4>\n<p>When proxying through <code>await</code>, the call to <code>sleep</code> in the <code>hello</code> method is blocking. This means that, even though it's running in a separate thread, I have to wait for the <code>sleep</code> to finish before the main thread (the <code>irb</code> session in this case) will respond:</p>\n<img src=\"/d21aba26c7f71b9256ab9ca0b573c2f4/hello-await-with-sleep.gif\">\n<h4 id=\"async-version-1\" style=\"position:relative;\"><a href=\"#async-version-1\" aria-label=\"async version 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Async Version</h4>\n<p>With <code>async</code>, the method returns right away and the main thread continues to run on its own. This means I can continue to interact with the main <code>irb</code> thread while waiting for my result to print:</p>\n<img src=\"/468d23be9d442a59cf813b01f94c053b/hello-async-with-sleep.gif\">\n<h2 id=\"conclusion\" style=\"position:relative;\"><a href=\"#conclusion\" aria-label=\"conclusion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Conclusion</h2>\n<p>While we haven't done much,  we now have a class that provides us with <code>async</code> and <code>await</code> proxy methods.  We were also able to make the difference in behavior between these two proxy methods more obvious through the use of <code>puts</code> and <code>sleep</code>. </p>\n<p>This is not even scratching the surface of the <code>Async</code> module, let alone the entire <code>concurrent-ruby</code> gem. What this does provide, however, is a great jumping-off point to explore the <code>Async</code> module further in the future.</p>\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .tomorrow {\n    background-color: #FFFFFF;\n    color: #4D4D4C;\n  }\n  .tomorrow .grvsc-t564vY-10 { color: #4271AE; }\n  .tomorrow .grvsc-t564vY-1 { color: #4D4D4C; }\n  .tomorrow .grvsc-t564vY-7 { color: #718C00; }\n  .tomorrow .grvsc-t564vY-11 { color: #8959A8; }\n  .tomorrow .grvsc-t564vY-9 { color: #C99E00; }\n  .tomorrow .grvsc-t564vY-8 { color: #C82829; }\n  .tomorrow .grvsc-t564vY-4 { color: #F5871F; }\n  .tomorrow .grvsc-t564vY-6 { color: #3E999F; }\n  .tomorrow .grvsc-t564vY-3 { color: #8E908C; }\n  .tomorrow .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(0, 0, 0, 0.05));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(0, 0, 0, 0.2));\n  }\n  body.dark .grvsc-ps-tJmpaV {\n    background-color: #1D1F21;\n    color: #C5C8C6;\n  }\n  body.dark .grvsc-ps-tJmpaV .grvsc-tJmpaV-10 { color: #81A2BE; }\n  body.dark .grvsc-ps-tJmpaV .grvsc-tJmpaV-1 { color: #C5C8C6; }\n  body.dark .grvsc-ps-tJmpaV .grvsc-tJmpaV-7 { color: #B5BD68; }\n  body.dark .grvsc-ps-tJmpaV .grvsc-tJmpaV-11 { color: #B294BB; }\n  body.dark .grvsc-ps-tJmpaV .grvsc-tJmpaV-9 { color: #F0C674; }\n  body.dark .grvsc-ps-tJmpaV .grvsc-tJmpaV-8 { color: #CC6666; }\n  body.dark .grvsc-ps-tJmpaV .grvsc-tJmpaV-4 { color: #DE935F; }\n  body.dark .grvsc-ps-tJmpaV .grvsc-tJmpaV-6 { color: #8ABEB7; }\n  body.dark .grvsc-ps-tJmpaV .grvsc-tJmpaV-3 { color: #969896; }\n  body.dark .grvsc-ps-tJmpaV .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n</style>","frontmatter":{"title":"Concurrent Ruby - Hello, Async","date":"May 14, 2020"}}},"pageContext":{"slug":"/2020/05/concurrent-ruby-hello-async/","previous":{"fields":{"slug":"/2020/03/referencing-local-gem-in-gemfile/"},"frontmatter":{"title":"Referencing a local gem in Gemfile"}},"next":{"fields":{"slug":"/2020/06/decision-making-spectrums/"},"frontmatter":{"title":"Decision Making Spectrums"}}}},"staticQueryHashes":["3128451518","3649515864"]}