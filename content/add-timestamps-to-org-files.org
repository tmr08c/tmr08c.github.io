#title: Add Timestamps to org-roam Files

In this post, I cover adding timestamps to track creation and modification times in [[https://github.com/org-roam/org-roam][=org-roam=]] files as well as how backfilling your existing nodes to include these timestamps.

** Adding the time stamps

We will track our creation and modification timestamps with [[https://orgmode.org/worg/dev/org-syntax.html#Keywords][keywords]]. I decided to use =created_at= and =last_modified=.

To start, let's make sure any newly create node includes our timestamp fields by updating our capture templates.

#+begin_src elisp
(setq org-roam-capture-templates
      '(("d" "default" plain "%?" :target
         (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+created_at: %U\n#+last_modified: %U\n\n\n")
         :unnarrowed t)))
#+end_src

This template is based on the [[https://github.com/org-roam/org-roam/blob/c3867619147175faf89ed8f3e90a1e67a4fd9655/org-roam-capture.el#L41-L45][default in org-roam]], and simply adds our two new keywords.

#+begin_src diff
 '(("d" "default" plain "%?" :target
-(file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
+(file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+created_at: %U\n#+last_modified: %U\n\n\n")
 :unnarrowed t))
#+end_src

If you have multiple capture templates, you will need to update them all.

** Updating the time stamps

In order to update our =last_modified= value when the file is modified, we will leverage a =before-save-hook=. Based on [[https://org-roam.discourse.group/t/update-a-field-last-modified-at-save/321/18][this post]], the hook leverages the built-in [[https://www.emacswiki.org/emacs/TimeStamp][=time-stamp= module]] to find and update the timestamp after our =last_modified= keyword.

#+begin_src elisp
(after! org
  (setq time-stamp-active t
        time-stamp-start "#\\+last_modified: [\t]*"
        time-stamp-end "$"
        time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
  (add-hook 'before-save-hook 'time-stamp))
#+end_src

Two things to note:

1. The =after!= keyword is [[https://github.com/doomemacs/doomemacs/blob/c44bc81a05f3758ceaa28921dd9c830b9c571e61/lisp/doom-lib.el#L496][defined in Doom]]. If you are not using Doom, you may need to adjust if you want this to only load for =org-mode= files.
2. This hook will run in all  in all of your org files. I have not noticed a performance concern when saving, but if you do, you may want to investigate limiting the scope of the hook. 

** Backfilling Data

At this point, my new =org-roam= files will be created with =created_at= and =last_modified= keywords set to the current time and the =last_modified= field will be updated on save. This will have no impact on my existing node database though. This next section covers processing my previous nodes to backfill =created_at= and =last_modified= values.

Please note that I am sure this is not the best =emacs-lisp= to solve this problem. I used this as a chance to learn some =emacs-lisp=. Only after the fact did I realize I should have referenced something like [[https://github.com/org-roam/org-roam/blob/main/org-roam-migrate.el][org-roam-migrate.el]] for better practices. That said, it does work which isn't bad for one-time-use code.

*** Getting Dates

To start, we need to determine how we are going to determine when a node was created and last modified.

Since I am leveraging org-roam's [[https://github.com/org-roam/org-roam/blob/7f453f3fffb924ca4ae3f8d34cabc03fbcae0127/org-roam-capture.el#L43][default filename capture template]], I had access to the canonical node creation time right in the file name.

#+begin_src elisp
(defcustom org-roam-capture-templates
  '(("d" "default" plain "%?"
     :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                        "#+title: ${title}\n")
#+end_src

With this format in mind, I could use a regular expression to match on the datetime format of the file name.

#+begin_src elisp :session foo
(defun tr/file-creation-time-from-name (fpath)
  "Extract a timestamp from the file name. Relies on files having the format
  'YYYYMMDDHHMMSS-*' (the default org-roam node filename)."
  (let ((filename (file-name-base fpath)))
    (tr/format-org-date
     (tr/time-stamp-to-org-timestamp
      (replace-regexp-in-string
       "\\([[:digit:]]\\{4\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)-.*"
       "\\1-\\2-\\3 \\4:\\5:\\6"
       filename)))))
#+end_src

Once I have the datetime extracted into a string, I use two helper functions to convert it into an org-friendly date.

First, I used a modified version of =org-timestamp-from-time= that can parse the datetime string we created and convert it into an =org-timestamp=.

#+begin_src elisp :session foo
(defun tr/time-stamp-to-org-timestamp (ts)
  "Taken from `org-timestamp-from-time` - the original function used
 `decode-time`, which doesn't work with our timestamp, so we use
 `parse-time-string` instead"
  (pcase-let ((`(,_ ,minute ,hour ,day ,month ,year . ,_) (parse-time-string ts)))
    (org-element-create 'timestamp
                        (list :type 'active
                              :year-start year
                              :month-start month
                              :day-start day
                              :hour-start hour
                              :minute-start minute))))
#+end_src

I then format the =org-timestamp= /back/ into a string, but formatted the same as the timestamp used when we create a new file.

#+begin_src elisp :session foo
(defun tr/format-org-date (date)
  (org-timestamp-format date "\[%Y-%02m-%02d %3a %02H:%02M\]"))
#+end_src


To fetch the =last_modified= value, we are able to the =file-attributes= function from =emacs= itself. After we grab the modification time from our file attributes, we able to use the function to cribbed from above (=org-timestamp-from-time=) and reuse our formatting function.

#+begin_src elisp :session foo
(defun tr/modification-timestamp (fpath)
  "Use file-attributes to get the modification time of a file and convert to an
  org-timestamp"
  (tr/format-org-date
   (org-timestamp-from-time
    (file-attribute-modification-time (file-attributes fpath)))))
#+end_src

Since I knew I would want both values for every file I was updating, I wrote a function that calls both helpers and wraps them in a list.

#+begin_src elisp :session foo
(defun tr/file-datetime-info (fpath)
  "Get a list contrianing a file's creation and change datetime"
  (list (tr/file-creation-time-from-name fpath)
        (tr/modification-timestamp fpath)))
#+end_src

*** Updating files

Now that, for a given file, we are able to get our two timestamps, we can use our =tr/file-datetime-info= function to add these values into our files. To do this I:

1. Open the given file in another window
2. Go to the top of the file
3. Check if the =create_at= field exists before moving on. Since I had created some new files using my new template and was debugging my code as I went, this allowed me to skip files I may have already updated.
4. Insert the two datetimes after the =title= keyword, matching our new file template above

I don't know if it was necessary to open the file in another window, but, during development, it was helpful to have the file I was manipulating already open. When running this in bulk, neither the =message= nor the other window provided much feedback because files were bring processed so quickly.

#+begin_src elisp
(defun tr/add-time-stamp (fpath)
  "Add `created_at` and `last_modified` timemstamps keywords to file"
  (message (format "Checking file %s" fpath))
  (setq case-fold-search t)
  (find-file-other-window fpath)
  (goto-char (point-min))
  ;; don't add if we already have `created_at'
  (unless (search-forward "#+created_at" 'nil t)
    (progn
      (pcase-let ((`(,created-time ,modified-time) (tr/file-datetime-info fpath)))
        (goto-char (point-min))
        (search-forward "#+title")
        (end-of-line)
        (newline)
        (insert (format "#+created_at: %s\n#+last_modified: %s" created-time modified-time))
        (write-file fpath))))
  (other-window 1))
#+end_src

*** Updating all the files

Now that we have all of the pieces in place to update a single file, updating all nodes is simple. We can leverage [[https://github.com/org-roam/org-roam/blob/7f453f3fffb924ca4ae3f8d34cabc03fbcae0127/org-roam.el#L115-L119][=org-roam-directory=]] to find all of our =org-roam-files= and call =tr/add-time-stamp= for each.

#+begin_src elisp
(let ((files (directory-files org-roam-directory 'full ".org")))
  (dolist (file files) (tr/add-time-stamp file)))
#+end_src

** Conclusion

 While I don't yet know if the decision to add these timestamps will prove to provide value or simply satisfy a curiosity, this work may be an example of getting more from the journey than the destination. My journey has taken me a step deeper into the world of Emacs and the power it provides in enabling packages configuration (updating my templates), editor behavior (adding save hooks), and bulk editing files.
