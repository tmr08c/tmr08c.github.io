#title: Add Timestamps to org-roam Files

In this post, I cover adding timestamps to track creation and update times in org-roam files as well as how I updated my exiting nodes to include these timestamps.

** Adding the time stamps

We will track our creation and modification timestamps with [[https://orgmode.org/worg/dev/org-syntax.html#Keywords][keywords]]. To start, let's make sure any newly create node includes keywords our timestamp fields. I decided to use =created_at= and =last_modified=.

#+begin_src elisp
(setq org-roam-capture-templates
      '(("d" "default" plain "%?" :target
         (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+created_at: %U\n#+last_modified: %U\n\n\n")
         :unnarrowed t)))
#+end_src

This template is based on the [[https://github.com/org-roam/org-roam/blob/c3867619147175faf89ed8f3e90a1e67a4fd9655/org-roam-capture.el#L41-L45][default in org-roam]], and simply adds our two new keywords.

#+begin_src diff
 '(("d" "default" plain "%?" :target
-(file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n")
+(file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+created_at: %U\n#+last_modified: %U\n\n\n")
 :unnarrowed t))
#+end_src

** Updating the time stamps

Now, when we create a new node with =org-roam=, we will have our timestamp keywords set with the current datetime. Since the goal of the =last_modified= field is to be updated when we have modified a file, we will need add a bit of emacs-lisp to our config.

TODO - does this end up adding the =before-save-hook= to /all/ buffers after =org= is loaded?
#+begin_src elisp
(after! org
  (setq time-stamp-active t
        time-stamp-start "#\\+last_modified: [\t]*"
        time-stamp-end "$"
        time-stamp-format "\[%Y-%02m-%02d %3a %02H:%02M\]")
  (add-hook 'before-save-hook 'time-stamp))
#+end_src

** Backfilling Data

At this point, my new =org-roam= files will be created with =created_at= and =last_modified= keywords set to the current time and the =last_modified= field will be updated on save. This will have no impact on my existing node database though. This next section covers processing my previous nodes to backfill =created_at= and =last_modified= values.

Please note that I am sure this is not the best =emacs-lisp= to solve this problem. I used this as a chance to learn some =emacs-lisp=. Only after the fact did I realize I should have referenced something like [[https://github.com/org-roam/org-roam/blob/main/org-roam-migrate.el][org-roam-migrate.el]] for better practices. That said, it does work which isn't bad for one-time-use code.

*** Getting Dates

To start, we need to determine how we are going to determine when a node was created and last modified.

Since I am leveraging org-roam's [[https://github.com/org-roam/org-roam/blob/7f453f3fffb924ca4ae3f8d34cabc03fbcae0127/org-roam-capture.el#L43][default filename capture template]]

#+begin_src elisp
(defcustom org-roam-capture-templates
  '(("d" "default" plain "%?"
     :target (file+head "%<%Y%m%d%H%M%S>-${slug}.org"
                        "#+title: ${title}\n")
#+end_src

I had access to the canonical node creation time right in the file name.

#+begin_src elisp :session foo
(defun tr/file-creation-time-from-name (fpath)
  "Extract a timestamp from the file name. Relies on files having the format 'YYYYMMDDHHMMSS-*' (the default org-roam node filename)."
  (let ((filename (file-name-base fpath)))
    (tr/format-org-date
     (tr/time-stamp-to-org-timestamp
      (replace-regexp-in-string
       "\\([[:digit:]]\\{4\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)-.*"
       "\\1-\\2-\\3 \\4:\\5:\\6"
       filename)))))
#+end_src

#+begin_src elisp :session foo
(defun tr/format-org-date (date)
  (org-timestamp-format date "\[%Y-%02m-%02d %3a %02H:%02M\]"))

(defun tr/time-stamp-to-org-timestamp (ts)
  "Taken from `org-timestamp-from-time` - the original function used
 `decode-time`, which doesn't work with our timestamp, so we use
 `parse-time-string` instead"
  (pcase-let ((`(,_ ,minute ,hour ,day ,month ,year . ,_) (parse-time-string ts)))
    (org-element-create 'timestamp
                        (list :type 'active
                              :year-start year
                              :month-start month
                              :day-start day
                              :hour-start hour
                              :minute-start minute))))
#+end_src


#+begin_src elisp :session foo
(defun tr/modification-timestamp (fpath)
  "Use file-attributes to get the modification time of a file and convert to an org-timestamp"
  (tr/format-org-date
   (org-timestamp-from-time
    (file-attribute-modification-time (file-attributes fpath)))))
#+end_src

#+begin_src elisp :session foo
(defun tr/file-datetime-info (filepath)
  "Get a list contrianing a file's creation and change datetime"
  (list (tr/file-creation-time-from-name filepath)
        (tr/modification-timestamp filepath)))

(tr/file-datetime-info  "/Users/troyrosenberg/Dropbox/Notes/org/roam/20210219212836-dailies.org")
#+end_src

#+begin_src elisp
(defun tr/add-time-stamp (fpath)
  "Append `created` and `last_modified` timemstamps to org efiles"
  (message (format "Checking file %s" fpath))
  (setq case-fold-search t)
  (find-file-other-window fpath)
  (goto-char (point-min))
  ;; don't add if we already have `created_at'
  (unless (search-forward "#+created_at" 'nil t)
    (progn
      (pcase-let ((`(,created-time ,modified-time) (tr/file-datetime-info fpath)))
        (goto-char (point-min))
        (search-forward "#+title")
        (end-of-line)
        (newline)
        (insert (format "#+created_at: %s\n#+last_modified: %s" created-time modified-time))
        (write-file fpath))))
  (other-window 1))
#+end_src

#+begin_src elisp
(let ((files (directory-files org-roam-directory 'full ".org")))
  (dolist (file files) (tr/add-time-stamp file)))
#+end_src


* Dropping (I think)
=mdls= learned about from https://unix.stackexchange.com/questions/501680/can-bash-read-the-date-added-of-a-file-directory


#+begin_src elisp

(parse-time-string (car (split-string "20210219212836-dailies.org" "-")))

(file-name-base "/Users/troyrosenberg/Dropbox/Notes/org/roam/20210219212836-dailies.org")

(parse-time-string
(replace-regexp-in-string
 "\\([[:digit:]]\\{4\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)\\([[:digit:]]\\{2\\}\\)-.*"
 "\\1-\\2-\\3 \\4:\\5:\\6"
 "20210219212836-dailies.org"))

;; (setq fpath  "/Users/troyrosenberg/Dropbox/Notes/org/roam/20210219212836-dailies.org")



;; (tr/file-creation-time-from-name fpath)
#+end_src

#+begin_src elisp
(defun tr/add-time-stamp (fpath)
  "Append `created` and `last_modified` timemstamps to org efiles"
  )

(org-timestamp-format
 (pcase-let ((`(,_ ,minute ,hour ,day ,month ,year . ,_)
  (parse-time-string
   (shell-command-to-string
    (concat "mdls -raw -name kMDItemFSCreationDate "
            (car (directory-files org-roam-directory 'full ".org")))))))
    (org-element-create 'timestamp
        		(list :type 'active
        		      :year-start year
        		      :month-start month
        		      :day-start day
        		      :hour-start hour
        		      :minute-start minute)))
 "\[%Y-%02m-%02d %3a %02H:%02M\]")

  ;; (pcase-let ((`(,_ ,minute ,hour ,day ,month ,year . ,_) (decode-time time)))
  ;;   (org-element-create 'timestamp
  ;;       		(list :type (if inactive 'inactive 'active)
  ;;       		      :year-start year
  ;;       		      :month-start month
  ;;       		      :day-start day
  ;;       		      :hour-start (and with-time hour)
  ;;       		      :minute-start (and with-time minute)))))

#+end_src
