#+title: Roam Node From Elfeed Entry

I had a very Emacs-y day, yesterday. It started with using [[https://github.com/skeeto/elfeed][elfeed]] to read articles in my RSS feed. After coming across an article I wanted to take some notes on, I stayed within Emacs to use my note taking tool of choice, [[https://www.orgroam.com/][org-roam]].  This is a regular occurrence for me and a process I do "by hand." Yesterday, knowing I had an open afternoon, I embarked on the most Emacs-y part of the dayâ€”attempting to find a way automate part of this process.

My current process for creating a new ~node~ from an ~elfeed~ entry isn't particular cumbersome:

1. I will use the shortcut to create a new org-roam ~node~.
2. Set the ~filetags~ to ~article~. I am not sure this part of my workflow will stay, but I have experimenting with tags such as ~video~ and ~article~ for content I have consumed, thinking may make it easier to find in the future.
3. I will set the title to the title used in the entry. I don't have an elegant way to do this, and end up copying the full entry line from the ~elfeed-search~ buffer. This capture the title, author, and tags I may have added. I will just paste this and delete everything but the title.
4. I store a link to the ~elfeed~ entry using ~org-store-link~ (some magic from DOOM or elfeed or something else makes this just work&trade;).
5. I paste the ~elfeed~ link into capture pane for the ~node~.
6. I write some notes.

<< Record Video? >>

This requires some diligence (using the right title, remembering to include the link), window jumping, and text clean-up, but isn't a time-consuming process. However, because I had some holiday time-off, I decided to use this as an opportunity to explore building my skills with customizing Emacs to my liking and explore writing a function to more quickly create and prepopulate an org-roam ~node~ based on the current ~elfeed~ entry I am viewing.

Inspired by my workflow above, I wanted to a function that would:

1. Create a new org-roam ~node~.
2. Set the title to match the title of the article I am reading.
3. Add the ~article~ filetag.
4. Include a link to the ~elfeed~ entry in the body of the note

Ultimately, looking something like:

#+begin_src org
,#+TITLE: Title of Article
,#+ filetags: "article"

link :: elfeed:link-to-article
#+end_src

Lucky for me, [[https://takeonrules.com/2022/02/07/org-roam-emacs-and-ever-refining-the-note-taking-process/][others have implemented this same flow]]. The focus of that blog post is a more intricate ~org-roam~ workflow, involving creating notes within "context" and auto-labeling work. While not central to the post, it does include references to how they capture notes on ~elfeed~ articles. This article is definitely worth a read, but since the author's workflow is a bit more advanced, I thought it would still be worth writing a post more directly related to creating a new ~org-roam~ node based on an ~elfeed~ entry.



* Holding Area
** Should I expand my process to crate nodes for the feeds?
I should be able to get information about the feed. I could create nodes for the feed and include them in the template as the =author=.

** Code to reference
#+begin_src elisp
; Learning from [[https://takeonrules.com/2022/02/07/org-roam-emacs-and-ever-refining-the-note-taking-process/][this post]], add a function for creating a new node from the currently viewed elfeed entry.

(defun tr/elfeed--create-roam-node ()
  "Create roam node from current elfeed entry"
  (interactive)
  (let* ((entry elfeed-show-entry)
         (title (elfeed-entry-title entry))
         (url (elfeed-entry-link entry))
         (link (plist-get (elfeed-link-store-link) :link)))
    (org-roam-capture-
     ;; use default tempalte (for now)
     :keys "ra"
     :node (org-roam-node-create :title title )
     :info (list :link link))))
#+end_src

#+begin_src elisp

 #+begin_src emacs-lisp
(let* ((file-name "%<%Y%m%d%H%M%S>-${slug}.org")
       (ref-file-name (concat "ref/" file-name))
       (properties "#+title: ${title}\n#+created_at: %U\n#+last_modified: %U\n"))
  (setq org-roam-capture-templates
        `(("d" "default" plain "%?" :target
           (file+head ,file-name ,properties)
           :unnarrowed t)
          ("r" "reference")
          ("ra" "ref-article" plain "%?" :target
           (file+head ,ref-file-name ,(concat properties "#+filetags: :article:\n\nlink :: ${link}\n\n"))
           :unnarrowed t)
          ("rb" "ref-book" plain "%?" :target
           (file+head ,ref-file-name ,(concat properties "#+filetags: :book:\n\nauthor :: ${author} \n* Summary
,** What problem(s) does the book intend to solve?
,** How proposed solution(s) does it have for these problem(s)?
,** The book in three sentences
  1.
  2.
  3.
,** Impressions
  ,#+BEGIN_COMMENT
  What are your personal feelings and takeaways after reading the book?
  ,#+END_COMMENT
,** Who should read it?
,** How the book changed me
,** Rating
,* Notes"))
           :unnarrowed t)
          ("rc" "ref-company" plain "%?" :target
           (file+head ,ref-file-name ,(concat properties "#+filetags: :company:\n\n"))
           :unnarrowed t)
          ("rp" "ref-person" plain "%?" :target
           (file+head ,ref-file-name ,(concat properties "#+filetags: :person:\n\n"))
           :unnarrowed t)
          ("rv" "ref-video" plain "%?" :target
           (file+head ,ref-file-name ,(concat properties "#+filetags: :video:\n\n"))
           :unnarrowed t))))
#+end_src
** TODO Add final post as webmention
https://takeonrules.com/2022/02/07/org-roam-emacs-and-ever-refining-the-note-taking-process/
