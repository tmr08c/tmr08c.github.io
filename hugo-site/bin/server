#!/usr/bin/env bash
set -euo pipefail

echo "ðŸš€ Starting Hugo development server..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_info() {
    echo -e "${BLUE}â„¹${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

# Default values
PORT=1313
HOST="127.0.0.1"
BUILD_DRAFTS=false
BUILD_FUTURE=false
FAST_RENDER=false
NAVIGATE_TO_CHANGED=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        -p|--port)
            PORT="$2"
            shift 2
            ;;
        -H|--host)
            HOST="$2"
            shift 2
            ;;
        -D|--buildDrafts)
            BUILD_DRAFTS=true
            shift
            ;;
        -F|--buildFuture)
            BUILD_FUTURE=true
            shift
            ;;
        --disableFastRender)
            FAST_RENDER=true
            shift
            ;;
        --navigateToChanged)
            NAVIGATE_TO_CHANGED=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [OPTIONS]"
            echo ""
            echo "Start Hugo development server with sensible defaults"
            echo ""
            echo "Options:"
            echo "  -p, --port PORT           Port to serve on (default: 1313)"
            echo "  -H, --host HOST           Host to bind to (default: 127.0.0.1)"
            echo "  -D, --buildDrafts         Include draft content"
            echo "  -F, --buildFuture         Include future dated content"
            echo "  --disableFastRender       Disable fast render mode"
            echo "  --navigateToChanged       Navigate to changed content automatically"
            echo "  -h, --help                Show this help message"
            echo ""
            echo "Examples:"
            echo "  $0                        # Start server with defaults"
            echo "  $0 -D -F                  # Include drafts and future content"
            echo "  $0 -p 8080                # Use port 8080"
            echo "  $0 -H 0.0.0.0             # Bind to all interfaces"
            exit 0
            ;;
        *)
            print_error "Unknown option: $1"
            echo "Use -h or --help for usage information"
            exit 1
            ;;
    esac
done

# Check if Hugo is available
if ! command -v hugo &> /dev/null; then
    print_error "Hugo not found! Please install Hugo first."
    echo "  Run: ./bin/setup"
    exit 1
fi

# Verify we're in the Hugo site directory
if [ ! -f "hugo.toml" ] && [ ! -f "config.toml" ] && [ ! -f "config.yaml" ]; then
    print_error "No Hugo configuration file found!"
    echo "Make sure you're in the Hugo site directory."
    exit 1
fi

# Build Hugo command
HUGO_CMD="hugo server --bind $HOST --port $PORT"

if [ "$BUILD_DRAFTS" = true ]; then
    HUGO_CMD="$HUGO_CMD --buildDrafts"
fi

if [ "$BUILD_FUTURE" = true ]; then
    HUGO_CMD="$HUGO_CMD --buildFuture"
fi

if [ "$FAST_RENDER" = true ]; then
    HUGO_CMD="$HUGO_CMD --disableFastRender"
fi

if [ "$NAVIGATE_TO_CHANGED" = true ]; then
    HUGO_CMD="$HUGO_CMD --navigateToChanged"
fi

# Display configuration
print_status "Hugo development server configuration:"
print_info "  Host: $HOST"
print_info "  Port: $PORT"
print_info "  Build Drafts: $BUILD_DRAFTS"
print_info "  Build Future: $BUILD_FUTURE"
print_info "  Fast Render: $([ "$FAST_RENDER" = true ] && echo "disabled" || echo "enabled")"
print_info "  Navigate to Changed: $NAVIGATE_TO_CHANGED"

echo ""
print_status "Starting server..."
print_info "Server will be available at: http://$HOST:$PORT/"
echo ""
print_warning "Press Ctrl+C to stop the server"
echo ""

# Execute Hugo command
exec $HUGO_CMD