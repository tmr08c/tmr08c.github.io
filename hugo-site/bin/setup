#!/usr/bin/env bash
set -euo pipefail

echo "ðŸš€ Setting up Hugo site development environment..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${GREEN}âœ“${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}âš ${NC} $1"
}

print_error() {
    echo -e "${RED}âœ—${NC} $1"
}

# Check if Homebrew is installed
if ! command -v brew &> /dev/null; then
    print_error "Homebrew is not installed. Please install it first:"
    echo "  /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
    exit 1
fi

print_status "Homebrew found"

# Install dependencies from Brewfile
if [ -f "Brewfile" ]; then
    print_status "Installing dependencies from Brewfile..."
    brew bundle --file=Brewfile
else
    print_error "Brewfile not found!"
    exit 1
fi

# Check if asdf is available
if command -v asdf &> /dev/null; then
    print_status "asdf found, installing tool versions..."
    
    # Add plugins if they don't exist
    if ! asdf plugin list | grep -q nodejs; then
        print_status "Adding Node.js plugin to asdf..."
        asdf plugin add nodejs
    fi
    
    if ! asdf plugin list | grep -q hugo; then
        print_status "Adding Hugo plugin to asdf..."
        asdf plugin add hugo
    fi
    
    # Install versions from .tool-versions
    if [ -f ".tool-versions" ]; then
        print_status "Installing tool versions from .tool-versions..."
        asdf install
    fi
else
    print_warning "asdf not found. Using system versions of tools."
fi

# Install Node.js dependencies
if [ -f "package.json" ]; then
    print_status "Installing Node.js dependencies..."
    if command -v npm &> /dev/null; then
        npm install
    else
        print_error "npm not found! Please install Node.js first."
        exit 1
    fi
else
    print_warning "No package.json found"
fi

# Verify Hugo installation
if command -v hugo &> /dev/null; then
    HUGO_VERSION=$(hugo version)
    print_status "Hugo is installed: $HUGO_VERSION"
else
    print_error "Hugo not found after installation!"
    exit 1
fi

# Verify Sass installation
if command -v sass &> /dev/null; then
    SASS_VERSION=$(sass --version)
    print_status "Dart Sass is installed: $SASS_VERSION"
else
    print_error "Dart Sass not found after installation!"
    exit 1
fi

# Verify PostCSS installation
if command -v postcss &> /dev/null || npx postcss --version &> /dev/null; then
    print_status "PostCSS is available"
else
    print_warning "PostCSS not found, but should be available via npm"
fi

echo ""
print_status "Setup complete! ðŸŽ‰"
echo ""
echo "To start the development server, run:"
echo "  npm run dev"
echo ""
echo "Or directly with Hugo:"
echo "  hugo server --bind 0.0.0.0 --port 1313 --buildDrafts"